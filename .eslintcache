[{"/mnt/c/wsl/dojo-blog/src/index.js":"1","/mnt/c/wsl/dojo-blog/src/App.js":"2","/mnt/c/wsl/dojo-blog/src/Navbar.js":"3","/mnt/c/wsl/dojo-blog/src/Home.js":"4","/mnt/c/wsl/dojo-blog/src/BlogList.js":"5"},{"size":432,"mtime":1610078090768,"results":"6","hashOfConfig":"7"},{"size":231,"mtime":1610078090752,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610078090768,"results":"9","hashOfConfig":"7"},{"size":1133,"mtime":1610152841667,"results":"10","hashOfConfig":"7"},{"size":331,"mtime":1610152866015,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"3nk75a",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/wsl/dojo-blog/src/index.js",[],["24","25"],"/mnt/c/wsl/dojo-blog/src/App.js",[],"/mnt/c/wsl/dojo-blog/src/Navbar.js",[],"/mnt/c/wsl/dojo-blog/src/Home.js",["26","27"],"import { useEffect, useState } from 'react';\nimport BlogList from './BlogList';\n\nconst Home = () => {\n  const [blogs, setBlogs] = useState(null);\n\n  const [name, setName] = useState('mario');\n\n  // const handleDelete = id => {\n  //   const newBlogs = blogs.filter(blog => blog.id !== id);\n  //   setBlogs(newBlogs);\n  // };\n\n  {\n    /*\n     * We're gonna be using json-server, instead of creating a db from scratch.\n     * Run command ðŸ‘‡\n     *\n     * $ npx json-server --watch data/db.json --port 8000\n     *\n     * ENDPOINTS:\n     * /blogs         GET       Fetch all blogs\n     * /blogs/{id}    GET       Fetch a single blog\n     * /blogs         POST      Add a new blog\n     * /blogs/{id}    DELETE    Delete a blog\n     */\n  }\n\n  useEffect(() => {\n    fetch('http://localhost:8000/blogs')\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        console.log(data);\n        setBlogs(data);\n      });\n  }, []); // useEffect dependancy\n\n  return (\n    <div className=\"home\">\n      {blogs && <BlogList blogs={blogs} title=\"All Blogs\" />}\n      <p>{name}</p>\n    </div>\n  );\n};\n\nexport default Home;\n","/mnt/c/wsl/dojo-blog/src/BlogList.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":7,"column":16,"nodeType":"34","messageId":"35","endLine":7,"endColumn":23},{"ruleId":"36","severity":1,"message":"37","line":14,"column":3,"nodeType":"38","messageId":"39","endLine":27,"endColumn":4},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'setName' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]